<head>
  <meta charset="utf-8">
  <title>Hex Puzzle Widget</title>
  <script>
        // Generated by CoffeeScript 2.7.0
    var ColorRotation, EventHandler, HexBox, HexDraw, Indicator, MissingPiecesMask, PiecePattern, PieceRedrawBuffer, PuzzleApp, PuzzleGridModel, PuzzlePiece, PuzzleStatus, PuzzleView, UiStatus, get_pattern_grid, get_puzzle_info, start,
      indexOf = [].indexOf;

    PuzzleApp = class PuzzleApp {
      constructor() {
        this.pz_status = new PuzzleStatus(this);
        this.ui_status = new UiStatus(this);
        this.events = new EventHandler(this);
        this.puzzle_view = new PuzzleView(this);
        this.hex_box = new HexBox(this);
        this.hex_draw = new HexDraw(this);
        this.piece = new PuzzlePiece(this);
        this.colors = new ColorRotation();
        this.indicator = new Indicator(this);
        this.grid_model = new PuzzleGridModel(this);
        this.mask = new MissingPiecesMask(this);
        get_puzzle_info(this);
      }

    };

    EventHandler = class EventHandler {
      constructor(puzzle_app) {
        this.puzzle = puzzle_app;
        this.pz_status = this.puzzle.pz_status;
        this.ui_status = this.puzzle.ui_status;
      }

      handle_mousedown(e) {
        var dx, dy, mouse_hex, px, py, x, y;
        this.canvas = document.getElementById("puzzle-widget");
        dx = this.canvas.offsetLeft;
        dy = this.canvas.offsetTop;
        px = e.pageX;
        py = e.pageY;
        x = px - dx;
        y = py - dy;
        if (this.pz_status.finished === true) {
          return get_puzzle_info(this.puzzle);
        } else {
          if (this.puzzle.piece.in_bounding_box(x, y)) {
            this.ui_status.activate_piece_drag();
            this.puzzle.hex_box.get_anchor_to_dragpoint(x, y);
            return mouse_hex = this.puzzle.grid_model.get_hex(x, y);
          }
        }
      }

      handle_mouseup(e) {
        if (this.ui_status.drag_active) {
          return this.ui_status.terminate_piece_drag();
        }
      }

      handle_mousemove(e) {
        var dx, dy, mouse_hex, mx_a, mx_b, px, py, x, y;
        if (this.ui_status.drag_active) {
          this.canvas = document.getElementById("puzzle-widget");
          dx = this.canvas.offsetLeft;
          dy = this.canvas.offsetTop;
          px = e.pageX;
          py = e.pageY;
          x = px - dx;
          y = py - dy;
          mouse_hex = this.puzzle.grid_model.get_hex(x, y);
          mx_a = mouse_hex[0];
          mx_b = mouse_hex[1];
          if (mx_a !== 99) {
            if (mx_a !== this.ui_status.active_hex[0] || mx_b !== this.ui_status.active_hex[1]) {
              this.ui_status.set_active_hex(mx_a, mx_b);
              this.puzzle.piece.draw_piece_ab(mx_a, mx_b);
              if (this.puzzle.piece.piece_is_anchored(mx_a, mx_b)) {
                return this.puzzle.pz_status.set_piece();
              }
            }
          }
        }
      }

    };

    UiStatus = class UiStatus {
      constructor(puzzle_app) {
        this.puzzle = puzzle_app;
      }

      reset() {
        this.drag_active = false;
        this.mouse_on_hex = false;
        return this.active_hex = [99, 99];
      }

      set_active_hex(a, b) {
        this.mouse_on_hex = true;
        return this.active_hex = [a, b];
      }

      disable_active_hex() {
        this.mouse_on_hex = false;
        return this.active_hex = [99, 99];
      }

      activate_piece_drag() {
        return this.drag_active = true;
      }

      terminate_piece_drag() {
        return this.drag_active = false;
      }

    };

    PuzzleStatus = class PuzzleStatus {
      constructor(puzzle_app) {
        this.puzzle = puzzle_app;
        this.all_pieces = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p"];
      }

      start_new_puzzle() {
        this.finished = false;
        this.unset_pieces = this.all_pieces.slice(0, 16);
        this.pieces_in_puzzle = 16;
        this.pieces_set = 0;
        this.h_ok = "no";
        this.i_ok = "no";
        this.puzzle.ui_status.reset();
        this.puzzle.indicator.clear_indicator();
        return this.start_first_piece();
      }

      set_piece() {
        this.puzzle.ui_status.terminate_piece_drag();
        this.pieces_set += 1;
        this.pieces_in_puzzle -= 1;
        if (this.pieces_set === 16) {
          return this.puzzle_finished();
        } else {
          return this.next_piece();
        }
      }

      puzzle_finished() {
        this.puzzle.puzzle_view.draw_photo();
        this.finished = true;
        return this.prompt_for_new_puzzle();
      }

      next_piece() {
        this.puzzle.mask.redraw_mask();
        this.puzzle.indicator.decrement();
        this.unset_pieces.splice(this.unset_pieces.indexOf(this.sym), 1);
        return this.pick_puzzle_piece();
      }

      start_first_piece() {
        this.puzzle.colors.new_rotation();
        this.puzzle.indicator.start_indicator();
        return this.pick_puzzle_piece();
      }

      pick_puzzle_piece() {
        var ok, pc, ref, ref1;
        ok = "no";
        while (ok !== "yes") {
          pc = Math.floor(this.pieces_in_puzzle * Math.random());
          this.sym = this.unset_pieces[pc];
          if (!(((this.sym === "h") && (this.h_ok === "no")) || ((this.sym === "i") && (this.i_ok === "no")))) {
            ok = "yes";
          }
          if ((ref = this.sym) === "b" || ref === "c" || ref === "g" || ref === "l" || ref === "m") {
            this.h_ok = "yes";
          }
          if ((ref1 = this.sym) === "d" || ref1 === "e" || ref1 === "j" || ref1 === "n" || ref1 === "o") {
            this.i_ok = "yes";
          }
        }
        return this.puzzle.piece.construct_piece(this.sym);
      }

      prompt_for_new_puzzle() {
        return this.puzzle.indicator.new_puzzle_prompt();
      }

    };

    MissingPiecesMask = class MissingPiecesMask {
      constructor(puzzle_app) {
        this.puzzle = puzzle_app;
        this.hex_draw = this.puzzle.hex_draw;
      }

      reset_mask() {
        this.puzzle.puzzle_view.draw_photo();
        this.get_next_color();
        return this.draw_mask();
      }

      redraw_mask() {
        this.puzzle.puzzle_view.draw_photo();
        return this.draw_mask();
      }

      get_next_color() {
        return this.color = this.puzzle.colors.next_color();
      }

      draw_mask() {
        var aa, bb, grid, j, results;
        grid = this.puzzle.grid;
        this.hex_draw.set_context("canvas");
        results = [];
        for (bb = j = 1; j <= 10; bb = ++j) {
          results.push((function() {
            var k, ref, results1;
            results1 = [];
            for (aa = k = 1; k <= 24; aa = ++k) {
              if (ref = grid[bb][aa], indexOf.call(this.puzzle.pz_status.unset_pieces, ref) >= 0) {
                results1.push(this.hex_draw.fill_hex_ab(aa, bb, this.color));
              } else {
                results1.push(void 0);
              }
            }
            return results1;
          }).call(this));
        }
        return results;
      }

    };

    PuzzlePiece = class PuzzlePiece {
      constructor(puzzle_app) {
        this.puzzle = puzzle_app;
        this.hex_box = this.puzzle.hex_box;
        this.pattern = new PiecePattern(this);
        this.redraw = new PieceRedrawBuffer(this);
        this.hexes = [];
        this.bounding_box = [0, 0, 0, 0];
      }

      construct_piece(sym) {
        var wd_ht;
        this.sym = sym;
        this.hexes = this.get_hexes();
        this.hex_box.set_hex_box(sym);
        wd_ht = this.hex_box.get_box_size();
        this.width = wd_ht[0];
        this.height = wd_ht[1];
        this.redraw.reset_size(this.width, this.height);
        this.pattern.draw_piece_pattern();
        this.cut_piece_from_photo();
        return this.draw_piece_ab(-7, 5);
      }

      get_hexes() {
        var aa, bb, hexes, j, k;
        hexes = [];
        for (bb = j = 1; j <= 10; bb = ++j) {
          for (aa = k = 1; k <= 24; aa = ++k) {
            if (this.puzzle.grid[bb][aa] === this.sym) {
              hexes.push([aa, bb]);
            }
          }
        }
        return hexes;
      }

      cut_piece_from_photo() {
        var context, photo, xx, yy;
        this.photo_clip = document.createElement('canvas');
        this.photo_clip.id = "photo-clip";
        this.photo_clip.width = this.hex_box.width;
        this.photo_clip.height = this.hex_box.height;
        this.photo_clip_context = this.photo_clip.getContext('2d');
        xx = this.hex_box.box_xy[0] - this.puzzle.puzzle_view.puzzle_xy[0];
        yy = this.hex_box.box_xy[1] - this.puzzle.puzzle_view.puzzle_xy[1];
        photo = this.puzzle.puzzle_view.photo;
        this.photo_clip_context.drawImage(photo, xx, yy, this.hex_box.width, this.hex_box.height, 0, 0, this.hex_box.width, this.hex_box.height);
        this.puzzle.mask.reset_mask();
        context = this.pattern.img.getContext('2d');
        context.globalCompositeOperation = 'source-atop';
        context.drawImage(this.photo_clip, 0, 0);
        return context.globalCompositeOperation = 'source-over';
      }

      draw_piece_ab(a, b) {
        var xy;
        xy = this.puzzle.hex_box.get_box_xy_ab(a, b);
        this.draw_piece(xy[0], xy[1]);
        return this.last_rendered_xy = xy;
      }

      draw_piece(x, y) {
        var canvas, context;
        this.redraw.apply_redraw();
        this.redraw.prepare_next_redraw(x, y);
        canvas = document.getElementById("puzzle-widget");
        context = canvas.getContext('2d');
        context.drawImage(this.pattern.img, x, y);
        return this.reset_bounding_box(x, y);
      }

      piece_is_anchored(a, b) {
        if (this.hex_box.anchor_hex[0] === a && this.hex_box.anchor_hex[1] === b) {
          return true;
        } else {
          return false;
        }
      }

      reset_bounding_box(x, y) {
        this.left = x;
        this.right = x + this.width;
        this.top = y;
        return this.bottom = y + this.height;
      }

      in_bounding_box(x, y) {
        if (x > this.left && x < this.right && y > this.top && y < this.bottom) {
          return true;
        } else {
          return false;
        }
      }

    };

    PiecePattern = class PiecePattern {
      constructor(piece) {
        this.piece = piece;
        this.puzzle = this.piece.puzzle;
        this.hex_box = this.puzzle.hex_box;
        this.hex_draw = this.puzzle.hex_draw;
        this.img = document.createElement('canvas');
        this.img.id = "piece-mask";
        this.piece_mask_context = this.img.getContext('2d');
      }

      draw_piece_pattern() {
        var aa, anchor_a, anchor_b, anchor_x, anchor_y, bb, context, hx, j, len, ref, results, xx, yy;
        this.img.width = this.hex_box.width;
        this.img.height = this.hex_box.height;
        this.hexes = this.piece.hexes;
        context = this.img.getContext('2d');
        anchor_a = this.hex_box.anchor_hex[0];
        anchor_b = this.hex_box.anchor_hex[1];
        anchor_x = 0;
        if (this.hex_box.corner_fit === "high") {
          anchor_y = 0;
        } else {
          anchor_y = 10;
        }
        ref = this.hexes;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          hx = ref[j];
          aa = hx[0];
          bb = hx[1];
          xx = (aa - anchor_a) * 14;
          yy = anchor_y + (bb - anchor_b) * 20;
          if (aa % 2 !== anchor_a % 2) {
            if (anchor_a % 2 === 0) {
              yy = yy + 10;
            } else {
              yy = yy - 10;
            }
          }
          this.hex_draw.set_context2(this.img);
          results.push(this.hex_draw.fill_hex_xy(xx, yy, "#000000"));
        }
        return results;
      }

    };

    PieceRedrawBuffer = class PieceRedrawBuffer {
      constructor(piece) {
        this.piece = piece;
        this.puzzle = this.piece.puzzle;
        this.view = this.puzzle.puzzle_view;
        this.canvas = document.getElementById("puzzle-widget");
        this.redraw_image = document.createElement('canvas');
        this.redraw_image.width = 30;
        this.redraw_image.height = 30;
        this.redraw_x = 0;
        this.redraw_y = 0;
      }

      reset_size(x, y) {
        this.width = x;
        this.height = y;
        this.redraw_image.width = this.width;
        return this.redraw_image.height = this.height;
      }

      apply_redraw() {
        var canvas, context;
        canvas = document.getElementById("puzzle-widget");
        context = canvas.getContext('2d');
        return context.drawImage(this.redraw_image, this.redraw_x, this.redraw_y);
      }

      prepare_next_redraw(x, y) {
        var ctx;
        ctx = this.redraw_image.getContext('2d');
        ctx.clearRect(0, 0, this.width, this.height);
        ctx.drawImage(this.canvas, x, y, this.width, this.height, 0, 0, this.width, this.height);
        this.redraw_x = x;
        return this.redraw_y = y;
      }

    };

    PuzzleView = class PuzzleView {
      constructor(puzzle_app) {
        this.puzzle = puzzle_app;
        this.puzzle_xy = [100, 30];
        this.reset();
      }

      reset() {
        "PuzzleView.reset";
        var canvas;
        canvas = document.getElementById("puzzle-widget");
        this.context = canvas.getContext('2d');
        this.context.fillStyle = "#999999";
        return this.context.fillRect(0, 0, 520, 280);
      }

      draw_photo() {
        var canvas, context;
        canvas = document.getElementById("puzzle-widget");
        context = canvas.getContext('2d');
        return context.drawImage(this.photo, this.puzzle_xy[0], this.puzzle_xy[1]);
      }

      get_drawing_context(mode) {
        var context, pm_img;
        switch (mode) {
          case "canvas":
            context = this.context_canvas;
            break;
          case "piece-mask":
            pm_img = document.getElementById("piece-mask");
            context = pm_img.getContext('2d');
        }
        return context;
      }

    };

    PuzzleGridModel = class PuzzleGridModel {
      constructor(puzzle_app) {
        this.puzzle = puzzle_app;
      }

      get_hex(x, y) {
        var aa, bb, corner, ctr_x, ctr_y, delta, dx, dy, hex, in_bounds, odd, r2, xx, yy;
        hex = [99, 99];
        in_bounds = true;
        delta = this.puzzle.hex_box.anchor_to_dragpoint;
        xx = x - delta[0];
        yy = y - delta[1];
        aa = Math.floor((xx - 12) / 14) - 7;
        if (aa % 2 !== 0) {
          odd = 1;
        } else {
          odd = 0;
        }
        bb = Math.floor((yy - 9 * odd + 2.5) / 20) - 1;
        corner = this.puzzle.hex_box.get_box_xy_ab(aa, bb);
        ctr_x = corner[0] + 9;
        ctr_y = corner[1] + 10;
        dx = Math.abs(xx - ctr_x);
        dy = Math.abs(yy - ctr_y);
        r2 = dx * dx + dy * dy;
        if (r2 > 67) { //(if radius > 8.2)
          in_bounds = false;
        }
        if (in_bounds === true) {
          hex = [aa, bb];
        }
        return hex;
      }

    };

    HexDraw = class HexDraw {
      constructor(puzzle_app) {
        this.puzzle = puzzle_app;
        this.puzzle_view = this.puzzle.puzzle_view;
        this.hex_box = this.puzzle.hex_box;
        this.mode = null;
        this.context = null;
        this.dx = 108;
        this.dy = 18;
        this.colors = ["#cc5050", "#5050cc", "#50cccc", "#50cc50", "#cccc50", "#cc50cc", "#000000"];
      }

      set_context(mode) {
        var canvas, pm_img;
        switch (mode) {
          case "canvas":
            canvas = document.getElementById("puzzle-widget");
            return this.context = canvas.getContext('2d');
          case "piece-mask":
            pm_img = document.getElementById("piece-mask");
            return this.context = pm_img.getContext('2d');
        }
      }

      set_context2(img) {
        return this.context = img.getContext('2d');
      }

      get_hex_xy(a, b) {
        var odd, x, xy, y;
        x = a * 14 + this.dx;
        if (a % 2 !== 0) {
          odd = 1;
        } else {
          odd = 0;
        }
        y = (2 * b + odd) * 10 + this.dy;
        xy = [x, y];
        return xy;
      }

      fill_hex_ab(a, b, color) {
        var xy;
        xy = this.get_hex_xy(a, b);
        return this.fill_hex_xy(xy[0], xy[1], color);
      }

      ctx_fill_hex_ab(ctx, a, b, color) {
        var cnv, xy;
        cnv = document.getElementById("puzzle-widget");
        this.context = cnv.getContext('2d');
        xy = this.get_hex_xy(a, b);
        return this.fill_hex_xy(xy[0], xy[1], color);
      }

      fill_hex_xy(x, y, color) {
        this.context.fillStyle = color;
        this.context.beginPath();
        this.context.moveTo(x + 5, y);
        this.context.lineTo(x + 15, y);
        this.context.lineTo(x + 20, y + 11);
        this.context.lineTo(x + 15, y + 20);
        this.context.lineTo(x + 4, y + 20);
        this.context.lineTo(x - 1, y + 10);
        this.context.lineTo(x + 5, y);
        this.context.fill();
        return this.context.closePath();
      }

    };

    HexBox = class HexBox {
      constructor(puzzle_app) {
        this.puzzle = puzzle_app;
        this.hexes = [];
        this.box_xy = [null, null];
        this.corner_fit = "unknown";
      }

      set_hex_box(piece_symbol) {
        this.reset_hexes(this.get_hexes(piece_symbol));
        return this.get_box_metrics();
      }

      reset_hexes(hex_collection) {
        return this.hexes = hex_collection;
      }

      get_box_metrics() {
        var aa, b2, hx, j, len, ref;
        this.init_box_params();
        ref = this.hexes;
        for (j = 0, len = ref.length; j < len; j++) {
          hx = ref[j];
          aa = hx[0];
          b2 = 2 * hx[1] + aa % 2 - 1;
          this.test_left_right_top_bottom(aa, b2);
        }
        this.get_corner_fit();
        this.get_anchor_hex();
        this.get_box_xy();
        this.get_height_width();
        return this.get_box_corner_to_anchor_hex_center();
      }

      get_height_width() {
        this.width = 14 * (this.right - this.left + 1) + 7;
        return this.height = 10 * (this.bottom - this.top + 2) + 1;
      }

      get_box_size() {
        return [this.width, this.height];
      }

      get_anchor_hex() {
        var aa, bb;
        aa = this.left;
        bb = (this.top + this.top % 2) / 2;
        if (this.left % 2 === 0 && this.corner_fit === "low") {
          bb = bb + 1;
        }
        return this.anchor_hex = [aa, bb];
      }

      get_box_xy() {
        return this.box_xy = this.get_box_xy_ab(this.anchor_hex[0], this.anchor_hex[1]);
      }

      get_box_xy_ab(a, b) {
        var xy;
        xy = this.puzzle.hex_draw.get_hex_xy(a, b);
        if (this.corner_fit === "low") {
          xy[1] = xy[1] - 10;
        }
        return xy;
      }

      get_corner_fit() {
        if (this.left % 2 === 1) {
          if (this.top % 2 === 1) {
            return this.corner_fit = "low";
          } else {
            return this.corner_fit = "high";
          }
        } else {
          if (this.top % 2 === 1) {
            return this.corner_fit = "high";
          } else {
            return this.corner_fit = "low";
          }
        }
      }

      get_box_corner_to_anchor_hex_center() {
        if (this.corner_fit === "high") {
          return this.box_corner_to_anchor_hex_center = [9, 10];
        } else {
          return this.box_corner_to_anchor_hex_center = [9, 20];
        }
      }

      get_anchor_to_dragpoint(x, y) {
        var an_dp_x, an_dp_y;
        an_dp_x = x - this.puzzle.piece.last_rendered_xy[0] - this.box_corner_to_anchor_hex_center[0];
        an_dp_y = y - this.puzzle.piece.last_rendered_xy[1] - this.box_corner_to_anchor_hex_center[1];
        return this.anchor_to_dragpoint = [an_dp_x, an_dp_y];
      }

      test_left_right_top_bottom(aa, b2) {
        if (aa < this.left) {
          this.left = aa;
        }
        if (aa > this.right) {
          this.right = aa;
        }
        if (b2 < this.top) {
          this.top = b2;
        }
        if (b2 > this.bottom) {
          return this.bottom = b2;
        }
      }

      init_box_params() {
        this.left = 25;
        this.right = 0;
        this.top = 20;
        return this.bottom = 0;
      }

      get_hexes(piece_symbol) {
        var aa, bb, hexes, j, k;
        hexes = [];
        for (bb = j = 1; j <= 10; bb = ++j) {
          for (aa = k = 1; k <= 24; aa = ++k) {
            if (this.puzzle.grid[bb][aa] === piece_symbol) {
              hexes.push([aa, bb]);
            }
          }
        }
        return hexes;
      }

    };

    Indicator = class Indicator {
      constructor(puzzle_app) {
        this.puzzle = puzzle_app;
      }

      start_indicator() {
        var canvas, context, j, p, xp, yp;
        this.clear_indicator;
        canvas = document.getElementById("puzzle-widget");
        context = canvas.getContext('2d');
        for (p = j = 16; j >= 1; p = --j) {
          context.fillStyle = this.puzzle.colors.rotation[16 - p];
          xp = 489 - 17 * p;
          yp = 6;
          context.beginPath();
          context.moveTo(xp + 5, yp);
          context.lineTo(xp + 12, yp);
          context.lineTo(xp + 12, yp + 17);
          context.lineTo(xp + 5, yp + 17);
          context.lineTo(xp, yp + 8);
          context.lineTo(xp + 5, yp);
          context.fill();
          context.closePath();
        }
        return this.write_message(16);
      }

      clear_indicator() {
        var canvas, context;
        canvas = document.getElementById("puzzle-widget");
        context = canvas.getContext('2d');
        context.fillStyle = '#999999';
        return context.fillRect(100, 0, 385, 30);
      }

      new_puzzle_prompt() {
        var canvas, context;
        this.clear_indicator();
        canvas = document.getElementById("puzzle-widget");
        context = canvas.getContext('2d');
        context.fillStyle = "#cc3333";
        context.font = "bold 14px sans-serif";
        context.textAlign = "left";
        context.textbaseline = "top";
        return context.fillText("Click for new puzzle", 240, 20);
      }

      decrement() {
        return this.write_message(this.puzzle.pz_status.pieces_in_puzzle);
      }

      write_message(n) {
        var canvas, context, cx, msg;
        canvas = document.getElementById("puzzle-widget");
        context = canvas.getContext('2d');
        context.fillStyle = "#999999";
        context.fillRect(100, 0, 115 + 17 * (16 - n), 30);
        context.fillStyle = "#333333";
        context.font = "bold 14px sans-serif";
        context.textAlign = "left";
        context.textbaseline = "top";
        if (n === 1) {
          msg = "1 piece left";
          cx = 374;
        } else {
          msg = n.toString() + " pieces left";
          cx = 100 + 17 * (16 - n);
          if (n < 10) {
            cx = cx + 10;
          }
        }
        return context.fillText(msg, cx, 20);
      }

    };

    ColorRotation = class ColorRotation {
      constructor(puzzle_app) {
        this.puzzle = puzzle_app;
        this.app_colors = ["#cc9999", "#a0cc99", "#99a6cc", "#cc99ad", "#b3cc99", "#99b9cc", "#cc99bf", "#c6cc99", "#99cccc", "#c599cc", "#ccbf99", "#99ccb8", "#b399cc", "#ccac99", "#99cca6", "#9f99cc"];
      }

      new_rotation() {
        if (Math.random() > 0.5) {
          this.color_direction = "up";
        } else {
          this.color_direction = "down";
        }
        this.start_number = Math.floor(16 * Math.random());
        return this.rotation = this.build_rotation();
      }

      build_rotation() {
        var i, j, k, ref, ref1, rr;
        rr = [];
        for (i = j = ref = this.start_number; (ref <= 15 ? j <= 15 : j >= 15); i = ref <= 15 ? ++j : --j) {
          rr.push(this.app_colors[i]);
        }
        if (this.start_number > 0) {
          for (i = k = 0, ref1 = this.start_number - 1; (0 <= ref1 ? k <= ref1 : k >= ref1); i = 0 <= ref1 ? ++k : --k) {
            rr.push(this.app_colors[i]);
          }
        }
        if (this.color_direction === "down") {
          rr = rr.reverse();
        }
        return rr;
      }

      next_color() {
        if (this.rotation === void 0) {
          this.rotation = this.build_rotation;
        }
        if (this.rotation.length > 0) {
          return this.rotation.shift();
        } else {
          return "#333333";
        }
      }

    };

    //   #   #   #   #   #
    //   Global Scope Statements
    //   #   #   #   #   #
    this.mousedown = function(e) {
      return this.app.events.handle_mousedown(e);
    };

    this.mouseup = function(e) {
      return this.app.events.handle_mouseup(e);
    };

    this.mousemove = function(e) {
      return this.app.events.handle_mousemove(e);
    };

    get_puzzle_info = function(app) {
      var url, xhr;
      xhr = new XMLHttpRequest();
      url = '/puzzle-data';
      xhr.open('GET', url);
      xhr.onreadystatechange = function() {
        var msg_in, photo, pstring, response;
        if (xhr.readyState === 4 && xhr.status === 200) {
          msg_in = xhr.responseText;
          response = JSON.parse(msg_in);
          pstring = response.pstring;
          app.grid = get_pattern_grid(pstring);
          photo = new Image();
          photo.onload = () => {
            app.puzzle_view.photo = photo;
            app.puzzle_view.draw_photo();
            return app.pz_status.start_new_puzzle();
          };
          return photo.src = response.photo;
        }
      };
      return xhr.send();
    };

    get_pattern_grid = function(data_string) {
      var ch, col, grid, j, k, n, row;
      grid = [];
      n = 0;
      for (row = j = 1; j <= 10; row = ++j) {
        grid[row] = [];
        for (col = k = 1; k <= 24; col = ++k) {
          ch = data_string[n];
          grid[row][col] = ch;
          n = n + 1;
        }
      }
      return grid;
    };

    start = function() {
      return this.app = new PuzzleApp();
    };

    window.onload = start;
  </script>
</head>

<body>

<h3>Hex Puzzle by JRS</h3>

<canvas id="puzzle-widget" width="520" height="280" style="background-color:#999999; border:2px solid red;" onmousedown="mousedown(event)" onmouseup="mouseup(event)" onmousemove="mousemove(event)"></canvas>

</body>
